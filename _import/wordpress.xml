<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.4.2" created="2012-11-10 03:36" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>HomeForFuture</title>
	<link>http://www.iwrose.com</link>
	<description>Just for future!</description>
	<pubDate>Sat, 10 Nov 2012 03:36:27 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.iwrose.com</wp:base_site_url>
	<wp:base_blog_url>http://www.iwrose.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>iwrose</wp:author_login><wp:author_email>iwrose@126.com</wp:author_email><wp:author_display_name><![CDATA[iwrose]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.4.2</generator>

	<item>
		<title>自己的Home终于在拖了这么久后盖起来了！</title>
		<link>http://www.iwrose.com/2012/08/19/%e8%87%aa%e5%b7%b1%e7%9a%84home%e7%bb%88%e4%ba%8e%e5%9c%a8%e6%8b%96%e4%ba%86%e8%bf%99%e4%b9%88%e4%b9%85%e5%90%8e%e7%9b%96%e8%b5%b7%e6%9d%a5%e4%ba%86%ef%bc%81/</link>
		<pubDate>Sun, 19 Aug 2012 14:09:07 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[前天买域名，今天买空间。等到晚上才把站点建设起来。第一次弄，有些不熟悉的地方，折腾的久点。

不过说实在的，Wordpress还真是傻瓜型的典范。速度、便捷。不过现在使用的wp基本都是默认配置，以后熟悉些了在慢慢的来个性化吧。

---特此，标记。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2012-08-19 22:09:07</wp:post_date>
		<wp:post_date_gmt>2012-08-19 14:09:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%87%aa%e5%b7%b1%e7%9a%84home%e7%bb%88%e4%ba%8e%e5%9c%a8%e6%8b%96%e4%ba%86%e8%bf%99%e4%b9%88%e4%b9%85%e5%90%8e%e7%9b%96%e8%b5%b7%e6%9d%a5%e4%ba%86%ef%bc%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a5%e5%bf%97"><![CDATA[日志]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于Linux。</title>
		<link>http://www.iwrose.com/2012/08/19/%e5%85%b3%e4%ba%8elinux%e3%80%82/</link>
		<pubDate>Sun, 19 Aug 2012 15:39:44 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[回想自己玩电脑到现在，按照Windows--&gt;Linux--&gt;Mac OS X的顺序，三大桌面系统都被我一一接触。其中，Mac OS X系统是我接触、也是投入最多的一个。

也许是玩腻味了，也许是不满意，反正最近一年一直飘荡这个想法：重新捡起Linux，认真彻底的学习好Linux的一切，深度定制一个真正属于自己的系统。总觉得这样很cool，不去做不安心！
<!--more-->
于是，动手写了个计划。从浅入深，按照"基础的命令--&gt;各种服务的配置--&gt;内核原理学习--&gt;自定义系统"的步骤来达到最终目的。
同时为了明确目标，打算学习的过程中再去考考RHCE。

此博客，最近半年也将以一系列关于Linux的文章为主。

想法实现可能需要点时间，慢慢来吧。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2012-08-19 23:39:44</wp:post_date>
		<wp:post_date_gmt>2012-08-19 15:39:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8elinux%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a5%e5%bf%97"><![CDATA[日志]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Markdown测试</title>
		<link>http://www.iwrose.com/2012/08/20/markdown%e6%b5%8b%e8%af%95/</link>
		<pubDate>Mon, 20 Aug 2012 05:59:44 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>这是标题</h1>

前段时间学会了markdown，发现用来<strong><em>做笔记</em></strong>的话非常方便。想再wp上也使用，所以安装了插件，现在来测试是否正常工作。



<h2>测试列表</h2>

<ol>
<li>这是列表1 </li>
<li>这是列表2 </li>
</ol>
<!--more-->
<h2>测试表格[失败]</h2>

<table>
<thead>
<tr>
  <th>Command</th>
  <th>Options</th>
  <th>Summary</th>
</tr>
</thead>
<tbody>
<tr>
  <td>one</td>
  <td>two</td>
  <td>three</td>
</tr>
<tr>
  <td>four</td>
  <td>five</td>
  <td>six</td>
</tr>
</tbody>
</table>

<h2>测试引用</h2>

<blockquote>
  test and test..


</blockquote>

<h2>测试水平线</h2>

<hr />

<h2>测试代码块</h2>

<pre><code>  #include&lt;stdio.h&gt;
  void main(){
      printf("Hello world");
  }
</code></pre>

<h2>测试Fenced块［失败］</h2>

&#96;<code>\</code>



xxxxxxFenced Blockxxxxx



&#96;`&#96;`



<h2>测试连接</h2>

<a href="http://www.baidu.com">Baidu</a>



<h2>测试图片</h2>

<img src="http://www.baidu.com/img/baidu_sylogo1.gif" alt="pic" />



<h3>引用图片</h3>

<img src="http://www.baidu.com/img/baidu_sylogo1.gif" alt="pic2" title="百度商标" />



<h2>测试删除线［失败］</h2>

~~I have been deleted~~



<hr />

目前看来，WP-Markdown插件不能满足要求。

需要用到multimarkdown或markdown extra语法的插件来试试了。不过没有找到，看来只能用Mou编辑好然后转为html了。
markdown就是没有一个统一标准。比较郁闷。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2012-08-20 13:59:44</wp:post_date>
		<wp:post_date_gmt>2012-08-20 05:59:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>markdown%e6%b5%8b%e8%af%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="markdown"><![CDATA[Markdown]]></category>
		<category domain="post_tag" nicename="markdown"><![CDATA[Markdown]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Markdown学习笔记</title>
		<link>http://www.iwrose.com/2012/08/20/markdown%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/</link>
		<pubDate>Mon, 20 Aug 2012 06:27:08 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=37</guid>
		<description></description>
		<content:encoded><![CDATA[
<blockquote>这是前段时间学习Markdown时记录的笔记，该语法与Mou编辑器兼容</blockquote>


<h1>Markdown学习笔记</h1>
<blockquote>注意一点，不要在块级HTML元素内使用Markdown格式化命令，Markdown不会处理它们。比如你不要
在一个HTML块中使用 <em>emphasis</em> 这样的Markdown格式化命令。

<!--more-->

Markdown中，以下字符支持使用反斜线转义：
<blockquote>\ 反斜线

` 反引号

* 星号

_ 下划线

{} 大括号

[] 中括号

() 小括号

# 井号

+ 加号

- 减号（连字符）

. 句点

! 感叹号</blockquote>
</blockquote>
<h2>块级元素</h2>
<blockquote>注意，该类元素前后得有空行隔开。</blockquote>
<h3>段落与换行</h3>
段落间用一个～多个空行隔开。

换行用&gt;2个空格加换行符隔开。
<h3>标题</h3>
有2种风格Setext与atx。
<h3>引用块</h3>
用邮件列表种的&gt;表示。
<h3>列表</h3>
<ul>
	<li>无序用+、-、*加空格表示。</li>
	<li>有序用 数字 加 . 加 空格 表示。</li>
</ul>
注意，如果每条列表包含多段内容，则每段开始前必须加tab或4个空格
<h3>代码块</h3>
代码块的书写很方便。每行前面tab就可以。发现不能支持<em>中文</em>（现在看来是之前的markdown pro软件本身的问题，用Mou的话非常的ok)。
<pre><code>#include&lt;stdio.h&gt; void main(){ printf("Hello world."); return; } </code></pre>
<h3>Fenced代码块</h3>
用包含三个反引号的line括起来表示. <del>实际上我觉得这就是行内代码的一种，只是书写时变化了点而已。</del>

修正：的确与行内代码是不同的。 应该是代码段的一种更加方便的书写方法。

另外，注意，该符号的书写必须满足两条件：<span style="color: red;"><em>1. 前面必须空一行 2. 前后符号必须各占单独的一行。</em></span>
<h3>水平线</h3>
用3个以上-、*就会得到水平线，如：

<hr />

<h3>Tables的书写</h3>
<pre><code>First Header|Second Header|Third Header :-----------|:-----------:|:---------- 第一项 |第二项 |第三项 第四项|第五项|第六项 </code></pre>
<blockquote>上面的这段文字，在Mou中的解释与github或Markdown Pro中的不同。</blockquote>
<table>
<thead>
<tr>
<th align="left">First Header</th>
<th align="center">Second Header</th>
<th align="left">Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">第一项</td>
<td align="center">第二项</td>
<td align="left">第三项</td>
</tr>
<tr>
<td align="left">第四项</td>
<td align="center">第五项</td>
<td align="left">第六项</td>
</tr>
</tbody>
</table>
<blockquote>冒号表示对齐。可以写的好看点，但是为了大字方便，是没必要的。</blockquote>
<h2>行级元素</h2>
<h3>链接</h3>
分为:
* 行内链接 如: <a title="我是title" href="http://www.baidu.com">百度</a>。即，格式为: <a title="标题" href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接文本</a>
* 引用链接
<blockquote>还有种自动链接，直接用&lt; &gt;包含起来。如：<a href="http://www.baidu.com">http://www.baidu.com</a> 。注意，必须写http。

书写Email的话也用这种自动连接的方式：<a href="mailto:xxx@126.com">xxx@126.com</a>。</blockquote>
<h3>强调</h3>
使用 *、<em> 表示强调。如 </em>xx_。

上面是斜体强调，还有种粗体强调用<code>**xx**, __xx__</code>的方法表示。
可以用\符号来转义。
<h3>删除线</h3>
使用2个～～符号包括起来表示。如：<del>我是要被删除的。</del>
<h3>行内代码</h3>
用反引号来包含起来。
<blockquote>要在一个行内代码中使用反引号（`）本身，用多个反引号作为定界符包住它：

``There is a literal backtick (`) here.``</blockquote>
<h3>图片</h3>
<ul>
	<li>行内图片

<code>![Alt text](/path/to/img.jpg)</code>

<code>![Alt text](/path/to/img.jpg "Optional title")</code></li>
	<li>引用图片

<code>![Alt text][id]</code>

<code>[id]: url/to/image "Optional title attribute"</code></li>
</ul>
<h2>补充知识</h2>
MultiMarkdown针对Markdown的某些缺失的功能，所设计的超集。

支持的语法有：
<blockquote>
<ul>
	<li>footnotes</li>
	<li>tables</li>
	<li>citations and bibliography (works best in LaTeX using BibTeX)</li>
	<li>math support</li>
	<li>automatic cross-referencing ability</li>
	<li>smart typography, with support for multiple languages</li>
	<li>image attributes</li>
	<li>table and image captions</li>
	<li>definition lists</li>
	<li>glossary entries (LaTeX only)</li>
	<li>document metadata (e.g. title, author, date, etc.)</li>
</ul>
</blockquote>
另外，Markdown Extra也是类似的Markdown超集。
支持的语法有：
<blockquote>
<ul>
	<li>Inline HTML</li>
	<li>Markdown Inside HTML Blocks</li>
	<li>Header Id Attribute</li>
	<li>Fenced Code Blocks</li>
	<li>Tables</li>
	<li>Definition Lists</li>
	<li>Footnotes</li>
	<li>Abbreviations</li>
	<li>Emphasis</li>
	<li>Backslash Escapes</li>
</ul>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2012-08-20 14:27:08</wp:post_date>
		<wp:post_date_gmt>2012-08-20 06:27:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>markdown%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="markdown"><![CDATA[Markdown]]></category>
		<category domain="post_tag" nicename="markdown"><![CDATA[Markdown]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>近2日的学习进度</title>
		<link>http://www.iwrose.com/2012/08/22/%e8%bf%912%e6%97%a5%e7%9a%84%e5%ad%a6%e4%b9%a0%e8%bf%9b%e5%ba%a6/</link>
		<pubDate>Wed, 22 Aug 2012 14:26:09 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=44</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>昨天主要做了2件事情：</strong>
1. 复习并学习了下Linux命令行，主要是重新玩弄下各个命令及其常见选项。
2. 看完了《正则表达式必知必会》这本小册子。因为之前有点基础，所以再看这本基础书就觉得特别的简单快捷，主要是学到了点专业术语，系统归纳并复习了下元字符、子表达式、回溯等等。
3. 翻了翻了《精通正则表达式》前三章的基础，后面的重点原理及技巧部分没看，打算再另外找时间学习。
<!--more-->
<strong>而，今天早上起来晚，倒是没干新的事情。</strong>
1. 总结复习了遍昨日的那本必知必会，做了点笔记。没办法，记忆力不够。
2. 想翻翻RHCE的书，没成。转而找了找LINUX方面的博客和站点。发现了两三个不错的个人站点。文章写的都不错。
3. 刚才，也就是今天晚上，利用易呗复习了下以前专门花好几天学习记忆的 Mac OS X快捷键。好几百个，倒是大部分都记得。

<strong>明天的计划</strong>
1. 搞定导师布置的任务。
2. 要系统认真搞定数据挖掘的知识了，去北京要用啊。 某种疼痛中～～
3. 看有时间没，复习下Linux命令，看完一章《精通正则表达式》。 不过估计是没啥时间了。

<strong>不得不说：</strong>
在Linux下，听歌，码点字，感觉很不错。 好好经营这个站点吧，加油！！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2012-08-22 22:26:09</wp:post_date>
		<wp:post_date_gmt>2012-08-22 14:26:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%bf%912%e6%97%a5%e7%9a%84%e5%ad%a6%e4%b9%a0%e8%bf%9b%e5%ba%a6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a5%e5%bf%97"><![CDATA[日志]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>击败find命令</title>
		<link>http://www.iwrose.com/2012/08/23/%e5%87%bb%e8%b4%a5find%e5%91%bd%e4%bb%a4/</link>
		<pubDate>Thu, 23 Aug 2012 13:13:29 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>对</strong>于find命令，不得不说点心理感受。想第一次学习到find命令的时候，我就被当时所看到的无比长的man文档与复杂的解释所吓到。于是，find就此被束之高阁，直到今天。

GNU有个关于findutils包的文档，文档那么多页，却只讲了4个命令：find, locate, updatedb, xargs。其中，find作为其中最复杂的命令，占了绝大篇幅。
刚开始，想从读man手册来入手，搞定find命令。<!--more-->然而，还是被长篇的英文文字恐吓到。主要是心理没点底，再加上是英文的话，更是恐慌。于是，走捷径，百度下看有无比较经典的关于find的学习笔记。运气不错，还真找到了。博主总结的很条理，将find命令的构成细致的分为：f<code>ind [option] [path] [test-expression] [action-expression] </code>四部分构成。这样一来，脑中倒是豁然开朗，再看man文档就轻松多了。
说到这里，我得补充点：我发现对于新知识的理解，实际上是建立在对新知识的分类上的。能否将新遇到的知识归纳分类，与自己头脑中的旧知识结合是关键。

下面我自己看man文档，然后总结：
这是man文档中对find命令的语法定义：
<code>find [-H] [-L] [-P] [-D debugopts] [-Olevel] [path...] [expression]</code>

<strong>5个Options：
</strong>-H: Not Follow symbolic link.
-L: Follow symbolic link.
-P: Never follow symbolic link.
-D: Debug information
-O: level 0-3

<strong>Test Expression:
</strong>测试表达式的作用是：通过一系列的属性限定，来过滤得到最终的目标文件。
主要有几大类别的测试表达式：
<em>1. 时间限定</em>
atime
ctime
mtime
amin
cmin
mmin
anewer
cnewer
newer

<em>2. 文件大小限定</em>
empty
size

<em>3. 文件的种类限定</em>
executable
type
writeable

<em>4. 所有者限定</em>
gid
user
group
uid

<strong>Action Expression:</strong>
告诉命令找到结果后该做什么。
-delete
-exec
-print

最后，有点要注意的：关于find的命令，有个配套的命令xargs，它结合find命令能够更加的加强find对找到的结果的处理操作。
上面总结的这个分类中，每条具体的Option的意思不打算写出了。我觉得既然所总结，就不要做的太细致，留下点思考的空间很有必要。忘记时可以通过man手册来温习。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2012-08-23 21:13:29</wp:post_date>
		<wp:post_date_gmt>2012-08-23 13:13:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%87%bb%e8%b4%a5find%e5%91%bd%e4%bb%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[www.94haha.com]]></wp:comment_author>
			<wp:comment_author_email>admin@94haha.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>112.246.11.17</wp:comment_author_IP>
			<wp:comment_date>2012-08-26 09:03:25</wp:comment_date>
			<wp:comment_date_gmt>2012-08-26 01:03:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>很多东西都挺实用呢</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[就是哈哈]]></wp:comment_author>
			<wp:comment_author_email>admin@94haha.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>119.178.137.105</wp:comment_author_IP>
			<wp:comment_date>2012-08-29 00:23:02</wp:comment_date>
			<wp:comment_date_gmt>2012-08-28 16:23:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>有对我有用的，转到QQ空间了，嘿嘿</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>这几天学习RHEL的总结</title>
		<link>http://www.iwrose.com/2012/08/30/%e8%bf%99%e5%87%a0%e5%a4%a9%e5%ad%a6%e4%b9%a0rhel%e7%9a%84%e6%80%bb%e7%bb%93/</link>
		<pubDate>Thu, 30 Aug 2012 05:21:18 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=63</guid>
		<description></description>
		<content:encoded><![CDATA[之前一直是学习些关于Linux命令相关的知识，也重点了解学习了下Bash的相关知识。昨天前天则重点放在具体学习某个发行版本上了，因为打算考个RHCE，所以，就拿RHEL 6上手了。找了几本英文资料在看，现在对这两天学习到的东西回顾总结。

实践是最好的学习方式。加上电脑之前上了8G内存，跑个虚拟机玩玩还是非常不错的，所以网上用1M的小水管下载了RHEL6.1版安装在虚拟机中。
<!--more-->
先是在看书之前安装了次系统，因为以前Linux系统也安装过不少次，也就没看啥教程，自己安装的。虽说系统搞定，但是遇到点问题，输入法，桌面环境（Gnome）什么的都是系统安装完成后，利用安装光盘自建本地Repo然后再补上的。此过程中好好的利用了google,baidu大神，折腾是折腾了，不过学到了东西。例如，如何配置本地yum源，如何安装rpm包，再加上折腾过程中对之前学习的命令的复习等等。

不过，拿到书对RHEL6具体的特性与安装注意点进行学习了后，发现有必要再次安装系统来巩固下RHEL6的安装知识。于是有了第二次系统的安装。

RHEL6支持KVM虚拟方案，不过之前完全没有听说过关于Linux上的虚拟知识，于是狠花了点时间细读英文资料，总算搞明白它是什么了。但是KVM需要cpu支持硬件虚拟，VMware下安装RHEL6肯定是不行的了，无法开启KVM。不过我妹的电脑是i3处理器，KVM完全无问题，可以安装在她机器上。但是家里没有光盘或U盘等制作安装介质的工具，没办法，只能按照资料中提到的PXE无盘启动安装了。以前没有了解或听过PXE，这又是一整折腾过程，badiu、google什么的又是手忙脚乱。不过还好昨天下午3、4点开始，晚上12点前搞定。

今天，针对PXE安装RHEL 6的过程和心得专门写一篇文章，见此：


上面的文字写的有些乱七八糟的，没办法，从小就不太会写叙事类文章。现在多写写，锻炼锻炼吧。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date>2012-08-30 13:21:18</wp:post_date>
		<wp:post_date_gmt>2012-08-30 05:21:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%bf%99%e5%87%a0%e5%a4%a9%e5%ad%a6%e4%b9%a0rhel%e7%9a%84%e6%80%bb%e7%bb%93</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="rhel"><![CDATA[RHEL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PXE方式安装RHEL 6.3</title>
		<link>http://www.iwrose.com/2012/08/30/pxe%e6%96%b9%e5%bc%8f%e5%ae%89%e8%a3%85rhel-6-3/</link>
		<pubDate>Thu, 30 Aug 2012 07:30:41 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>PXE安装一句话原理</strong>
PXE网络安装是让在同一局域网中的一个或多个主机们利用机器自带的PXE功能， 通过该网络中某台提供PXE网络安装服务的主机来实现系统安装。
<strong>安装需要的前提条件</strong>
如果不满足这些条件，这篇文章就只有参考学习意义，无指导作用：
1. 需要至少2台机器在同一局域网，除了一台或多台需要安装系统的机器，即客户端。还必需有一台提供TFTP，DHCP服务，以及ftp或http或nfs服务的机器，即服务器端。
2. 客户端机器的网卡自带PXE, BIOS中支持PXE启动。
<!--more-->
<strong>PXE安装的原理详解</strong>
1. 客户端通过PXE启动后，会自动的搜索局域网中的DHCP服务器，获取ip。
2. 通过DHCP的配置文件，得到服务器端机器的ip, 然后利用tftp服务，从服务器端获得 开始RHEL安装所需引导文件，例如, pxelinux.0, vmlinuz, initrd.img等文件。
3. 运行这些引导文件，即一个非常几本的“小Linux”系统。到这一步，实际已经完成了PXE所要做的所有工作。这前3步所完成的工作与直接用RHCE引导cd插入电脑光驱运行所达到的效果一样。
4. 按照步骤开始安装，在选择安装介质那一步，选择NFS(如果服务其端是通过NFS服务共享的RHEL6完整DVD安装文件)或URL(服务器通过Ftp或http服务提供的安装文件共享)。
5. 填写好提供nfs或ftp或http服务器端的ip地址等信息，继续下一步则该“小linux”系统会从服务器端获取RHEL6 DVD中的数据重新加载运行接下来的安装与配置。如果在第3步的小Linux运行后，选择安装方式时，给kernal附加一个ks="XXXks.cfg文件地址XX"或者在服务器端的default文件中填写好相关信息(具体如何填写请看下文)，则可以实现Kickstart全自动无人值守安装。
6.剩下的都简单啦，此文不解释。

客户端的PXE如何弄，由于机器不同，BIOS什么的都不同，可以自己搜索。只要硬件支持，实现PXE启动很简单，在此不作介绍。

<strong>下面，重点介绍下服务器端的配置：</strong>
服务器端主要要实现至少3中服务：a. DHCP服务 b. TFTP服务，该服务配合DHCP服务完成上面所说的前3个步骤。 c.ftp,http,nfs三种中的一种服务，该服务结合DHCP服务完成上述的后面几步的安装，它主要是用来让客户端的“小Linux”实现网络安装。 d.可选。ftp,http服务中的一种，用来共享kickstart ks.cfg文件，实现kickstart自动安装。

<strong>1. 安装DHCP服务并配置：</strong>
安装命令：yum install dhcp
备注：如果你发现你运行yum命令无法实现安装，则表明你需要配置yum安装源。推荐利用RHEL6 DVD光盘或iso文件制成本地yum源，具体如何做，百度上就有不少文章介绍。
安装中遇到：我用该命令安装时，出错，提示我dhcp的man文件与已经安装的dhclient包冲突。
如何解决：a. 卸载dhclient。发现dhclient是有用的，故没卸载。不成功。 b. 直接找到dhcp rpm包，rmp -ivh安装。成功。
何原因：不知道。不清楚为什么会冲突。
配置dhcp：
生成dhcpd.conf文件： <code>find /usr -name "dhcpd.conf.sample" -exec cp -p {} /etc/dhcp/dhcpd.conf \;</code>
在dhcpd.conf文件中加入下面内容：
<code>ddns-update-style interim;
ignore client-updates;
next-server 192.168.1.103; #服务器端ip地址，根据个人电脑自己修改
filename "pxelinux.0";
subnet 192.168.1.0 netmask 255.255.255.0 {
option routers 192.168.1.103; #可能可以不用这一行。没试过
option subnet-mask 255.255.255.0;
range 192.168.1.200 192.168.1.220;
default-lease-time 600;
max-lease-time 7200;
}</code>
上面的子网ip与你的局域网要相同。
启动dhcp服务：
<code>/etc/init.d/dhcpd start</code>

<strong>2. NFS服务与安装源部署(实际上即是共享RHEL6.3 DVD的内容。)</strong>
安装NFS: <code>yum install nfs*</code>
启动服务：/etc/init.d/rpcbind start
配置安装源：echo "/media/cdrom *(sysnc,ro)" &gt;&gt; /etc/exports
备注：/media/cdrom里面即是RHEL DVD里的内容。将iso文件挂在在/media/cdrom即可， mount -r -o loop RHEL6.3.iso /media/cdrom。
启动nfs服务：/etc/init.d/nfs start

<strong>3. TFTP服务与PXE相关部署</strong>
安装TFTP：<code>yum install tftp-server</code>
启动TFTP服务： <code>chkconfig tftp on; /etc/init.d/xinetd restart</code>
<code>部署PXE相关文件：
mkdir /var/lib/tftpboot/pxelinux.cfg
cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/
cp /media/cdrom/images/pxeboot/{vmlinuz,initrd.img} /var/lib/tftpboot/
cp /media/cdrom/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default
cp /media/cdrom/isolinux/vesamenu.c32 /var/lib/tftpboot/</code>
接下来配置default文件(如果不需要Kickstart无人安装，该步省略)
编辑default文件部分内容为：
<code>label linux
menu label ^Install or upgrade an existing system
menu default
kernel vmlinuz
append initrd=initrd.img ks=http://192.168.1.103/ks.cfg</code>
最后一行为添加的数据。

<strong>4. http服务与ks.cfg (如果不需要Kickstart无人安装，该步省略)</strong>
安装http:<code> yum install httpd*</code>
部署：将ks.cfg文件放入/var/www/html/文件夹中。ks.cfg文件的访问路径即为:http://192.168.1.103/ks.cfg
启动服务：<code>/etc/init.d/httpd start</code>

&nbsp;

<strong>最后，</strong>服务器端关闭防火墙，让客户端PXE启动，则可以开始PXE安装RHEL 6的美妙过程。如果不关闭防火墙，可能无法成功。
system-config-firewall命令配置防火墙。

OK，终于搞定写完这篇文章了。2个多小时才搞定的记录文章。:) 收工！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2012-08-30 15:30:41</wp:post_date>
		<wp:post_date_gmt>2012-08-30 07:30:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pxe%e6%96%b9%e5%bc%8f%e5%ae%89%e8%a3%85rhel-6-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="kickstart"><![CDATA[Kickstart]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="pxe"><![CDATA[PXE]]></category>
		<category domain="post_tag" nicename="rhel"><![CDATA[RHEL]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GNU Emacs Manual 之初次阅读 （一）</title>
		<link>http://www.iwrose.com/2012/08/31/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e4%b8%80%ef%bc%89/</link>
		<pubDate>Thu, 30 Aug 2012 16:11:47 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[晚上，开后台下载VMware Fusion 5，然后随意摆弄电脑，突然想到前些天稍微看过GNU Emacs Manual的前几节。于是，有了想法，打算再复习一遍，然后记录下来。一为加深印象，二为以后复习。Manual还是非常厚的，看完还是狠需要花点时间，所以做成一个系列吧。

Manual中前面的最开始有3小节内容，之前没有看，本以为没啥东西，现在看来是我之前太过急躁，忽略了好东西了。
<strong>Distrib</strong>:: How to get the latest Emacs distribution.这一节真没啥，忽略。

<strong>Intro</strong>这一节是对Emacs介绍，现摘录其中个人觉得不错的文字：
<blockquote>Emacs editing commands operate in terms of characters, words, lines, sentences, paragraphs, and pages, as well as expressions and comments in various programming languages.</blockquote>
<!--more-->
说实在的，在buffer中做的一切文字编辑操作，归结起来就是对从字符到段落，表达式，评论等一系列对象的Control。恰好，Emacs的主modify key就是Control。:) 所以记忆快捷键的时候是可以利用这个原理来找点记忆规律的。例如GNU Emacs Reference Card中对于移动和删除操作的总结就很不错的，见下图：

<a href="http://www.iwrose.com/wp-content/uploads/2012/08/屏幕快照-2012-08-30-下午11.43.40.png"><img class="alignnone size-medium wp-image-79" title="屏幕快照 2012-08-30 下午11.43.40" src="http://www.iwrose.com/wp-content/uploads/2012/08/屏幕快照-2012-08-30-下午11.43.40-234x300.png" alt="" width="234" height="300" /></a>

<blockquote>You are reading about GNU Emacs, the GNU incarnation of the advanced, self-documenting, customizable, extensible editor Emacs.</blockquote>
这段文字描述了个事实，Emacs的事实，编辑器能做到这三点，真的已经是修炼到无上境界了，它可以说自己是天下无敌了。这也是Emacs能够当“操作系统”用的原因了。:)
self-documenting means：无论你什么时候遇到新命令或者是忘记什么命令了，用C-h帮助就可以获得你不知道或遗忘的任何信息。所以，学习Emacs最先要学好的命令是C-h相关命令。
customizable means：Emacs编辑器在手你可以改变它现有任意一点用户体验，说到底就是可以替换改变任何现有命令的操作方式。修改快捷键，自定义主题等等。
extensible means：Emacs不仅能自定义，还能发明。用Lisp语言发明、构建全新的命令。

<strong>Glossary</strong>::Terms used in this manual.这一节可以在看完Manual后再看，巩固、找漏用还是不错的。现在先略过。

:)打字还真是麻烦事，这篇文字就到这先。啥时能大脑直接控制打字就好了，或者语音识别到达新一层次就轻松了。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2012-08-31 00:11:47</wp:post_date>
		<wp:post_date_gmt>2012-08-30 16:11:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e4%b8%80%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GNU Emacs Manual 之初次阅读 （二）</title>
		<link>http://www.iwrose.com/2012/08/31/83/</link>
		<pubDate>Thu, 30 Aug 2012 18:02:03 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[Important General Contcepts这一章很重要，介绍了Emacs的很多基础知识。有利于于以后更加系统的学习理解Emacs。

<strong>首先，了解Screen。
</strong>Emacs运行在两种环境中,图形和终端。在图形显示环境中，Emacs是在一个“图形窗口”中显示。不过要注意，这里的“图形窗口”是相对于操作系统来说的，窗口一词在Emacs中有不同的定义，这点要区分清楚。用Emacs的术语来说，我们称该“图形窗口”为frame。
frame下包含:menu bar, tool bar(图形界面中才有), window, echo area.
而window下包含buffer, mode line, scroll bar(图形界面中才有)
另外，注意:


<blockquote>At any time, one window is the "selected window".
The buffer displayed in the selected window is called the "current buffer", and it is where editing happens.</blockquote>


一个窗口只能有一个buffer，但是一个frame可以有多个窗口。
<!--more-->
接下来，继续。
<strong>Point:
</strong>>>The term "point" comes from the character `.', which was the command in TECO (the language in which the original Emacs was written) for accessing the editing position.

光标默认是显示成一个solid block, 插入的文字是出现在当前光标所覆盖的字符的前面。这也是块状光标的默认约定，应该是所有编辑器都通用。用这种光标比较优待眼睛，毕竟一条细线相比一个“砖块”来说还是更难被发现。
不过，如果你实在不喜欢这种砖块显示方式的话，emacs也是可以让你自定义的。具体见以后文章。

<strong>Echo Area:
</strong>echo area主要的用处是显示 各类信息 和 minibuffer。
显示各类信息，包括：
1. 显示multi-character commands的提示信息。而single-character 不echo。
2. 显示error message，当命令无法工作时。Error messages may be accompanied by beeping or by flashing the screen.
3. 显示 informative meassage，是命令显示的一些特殊信息。会长时间显示着。这类信息是被保存在*Message*这个buffer中。

<strong>The Mode Line:
</strong>>>The text displayed in the mode line has the following format:
>>CS:CH-FR  BUF      POS LINE   (MAJOR MINOR)

“CS”表示：当前buffer的character set信息。如果是text terminal下的Emacs, 会在前面多显示2个字符，表示the coding systems for keyboard input and terminal output。如果使用了内置输入法，还会用a string显示输入法信息。
“:”表示：buffer中每个line结束时采用的换行方式是"newline character"，colon符号可以用(Unix)代替。'\' or '(DOS)'表示的是"carriage-return" character followed by a "linefeed" character。'/' or 'Mac'表示的是"carriage-return" character。
"CH"表示：当前缓存内文字的编辑状态，unmodified, modified, read-only等等。
“-”表示：当前buffer是在本地还是远程服务器。
"FR"表示：frame的名称，text termianl emacs特有。
"BUF"表示：name of buffer.
"POS"表示：位置信息。
"Line"表示：光标所在行的信息。

:) Emacs表示，mode line同样可以自定义。

<strong>The Menu Bar:
</strong>没啥好说的，就要知道点: text terminal emacs下可以用 'M-`'调出Menu bar。F10表示我也是可以滴。^_^


收工，睡觉，之前没有细看mode line这一subnode。刚才变看边写的，感觉还是有必要了解的。

bye!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2012-08-31 02:02:03</wp:post_date>
		<wp:post_date_gmt>2012-08-30 18:02:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>83</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>我不得不去聊聊Auto more tag这个插件</title>
		<link>http://www.iwrose.com/2012/08/31/%e6%88%91%e4%b8%8d%e5%be%97%e4%b8%8d%e5%8e%bb%e8%81%8a%e8%81%8aauto-more-tag%e8%bf%99%e4%b8%aa%e6%8f%92%e4%bb%b6/</link>
		<pubDate>Thu, 30 Aug 2012 21:19:13 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[

<blockquote>Auto More Tags is a WordPress plugin that allows you to forget placing a more tag on every post. 
It lets you stop worrying about where you should place those tags, and just set rules. 
Once those rules are set, the intelligent placing system will use your settings as a guideline, 
and attempt to place the more tag as closely to your settings as possible, without breaking 
formatting or cutting pa… 作者为 Travis Weston.</blockquote>


看看上面这描述，曰，有没有测试过啊！？？ 本来图个便捷，结果安装后，所有文章被截断，数据消失。我的所有辛苦写的文字啊！虽然只有10篇，但是也是心血就这样没了。
<!--more-->
不过，也许不是运气差到极点，之前有安装过wponlinebackup这个插件，也恰好为了测试，整站资料都备份了发送到自己的邮箱了。于是开始了尝试恢复，这过程也是无语到点。

这个备份插件备份没问题，但是恢复的时候就有问题了，无论怎么搞都无法恢复，没加密非得让我填密码。考！不成功。
于是用站点管理后台恢复，结果sql文件恢复过去后网站数据回来了，但是却狗血的全乱码，嚓，毛回事啊？不清楚，再多次试都一样结果。

到了这里，还是得感谢自己的突然灵感，将之前丢失数据了sql文件download下来，对比，把备份的sql中包含文章数据的那段sql语句拷贝过去。然后再把这个结合体恢复过去，终于算是解决问题了。

好了，再次鼻屎auto more tag这个插件的作者Travis Weston. 太不负责任了。看了该插件首页，发现不少人遇到和我一样的问题，估计都把这2货骂死了。不过我自己也是太粗心大意了，没有安全意识。。以后好好改进。

休息了，累心累力。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2012-08-31 05:19:13</wp:post_date>
		<wp:post_date_gmt>2012-08-30 21:19:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%88%91%e4%b8%8d%e5%be%97%e4%b8%8d%e5%8e%bb%e8%81%8a%e8%81%8aauto-more-tag%e8%bf%99%e4%b8%aa%e6%8f%92%e4%bb%b6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a5%e5%bf%97"><![CDATA[日志]]></category>
		<category domain="post_tag" nicename="%e9%aa%82xx"><![CDATA[骂XX]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GNU Emacs Manual 之初次阅读 （三）</title>
		<link>http://www.iwrose.com/2012/08/31/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e4%b8%89%ef%bc%89/</link>
		<pubDate>Fri, 31 Aug 2012 10:55:31 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[继续接上篇文章。按照手册顺序来学习
<strong>Kinds of User Input：
</strong>Emacs最强大的一点就是能够完全无鼠标操作。所以，鼠标的运用我不打算去了解。
<blockquote>Simple characters and control characters, as well as certain non-keyboard inputs such as mouse clicks, are collectively referred to as "input events".</blockquote>
Simple characters是指数字、字母、基础符号、空格等，它们都能通过按键盘上相应键就直接插入到buffer中。
Control charaters相反，无法直接插入，需要用C-q命令插入。
不过，不论是输入的普通字符还是控制字符，都叫做Input event.
<!--more-->
<strong>Keys</strong>(文档写的很清晰，这节就直接摘录了):
A "key sequence", or "key" for short, is a sequence of one or more input events that is meaningful as a unit.
If a key sequence invokes a command, we call it a "complete key";
If a key sequence isn't long enough to invoke a command, we call it a "prefix key".
所以说：Every key sequence is either a complete key or a prefix key.
要注意：You can't add input events onto a complete key.
做个统计：By default, the prefix keys in Emacs are `C-c', `C-h', `C-x', `C-x', `C-x @', `C-x a', `C-x n', `C-x r', `C-x v', `C-x 4', `C-x 5', `C-x 6',, `M-g', and `M-o'.

有个小诀窍：
<span style="text-decoration: underline;">Typing the help character (`C-h' or ) after a prefix key displays a list of the commands starting with that prefix.</span>
<span style="text-decoration: underline;"> 不过对于ESC键是失效的。</span>

<strong>Keys and Commands:
</strong>虽然Emacs中有非常多的快捷键，不过按下这些键后，Emacs并不是直接就执行指定任务。相反，每个快捷键背后都和一个command绑定着，没有例外。按下键，相当于查寻了一个keymaps表，然后执行对应的commands。这样便于shortcuts自定义。
通常，我们说的例如执行C-n命令的说法严格意义来说都是不准确的，C-n只是key, 命令是next-line。

<strong>Entering &amp; Exiting Emacs:
</strong>If the variable `inhibit-startup-screen' is non-`nil', Emacs does not display the startup screen.
不过自定义的时候，注意： Setting `inhibit-startup-screen' in `site-start.el' doesn't work, because the startup screen is set up before reading `site-start.el'.
不知道的小技巧：
To kill Emacs without being prompted about saving, type `M-x
kill-emacs'.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date>2012-08-31 18:55:31</wp:post_date>
		<wp:post_date_gmt>2012-08-31 10:55:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e4%b8%89%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GNU Emacs Manual 之初次阅读 （四）</title>
		<link>http://www.iwrose.com/2012/08/31/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%9b%9b%ef%bc%89/</link>
		<pubDate>Fri, 31 Aug 2012 14:11:47 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=145</guid>
		<description></description>
		<content:encoded><![CDATA[前面的文章已经将Emacs的基础概念介绍完毕，现在开始进入EMacs的编辑命令的学习。
先学习下Basic Editing Commands，这大概也就是Emacs Tutorial的内容。也是大多是初学习必须掌握的知识，学完这一节就可以完成日程的基础编辑工作了。
<strong>Inserting Text:
</strong>在这节Emacs manual又将charater分为graphic charater 和 nongraphic charater，而前面所说的却是simple character 和control charater。这点让我还是有些迷惑,找了找wikipedia，也没找到啥标准的称呼，暂且标记下来。
<!--more-->
C-q可以用来插入nongraphic character, 还可以:
`C-q' followed by a sequence of octal digits inserts the character with the specified octal character code.（默认是八进制，不过可以通过设置 read-quoted-char-radix变量为十或十六进制）
另外，Instead of `C-q', you can use the command `C-x 8 <RET>' (`ucs-insert').

Changing the Location of Point
<strong>这节就是告诉你如何移动光标。不细说了。只列举一般教程中都没介绍的keys.
</strong>M-r : move-to-window-line-top-bottom
M-g g 或 M-g M-g: goto-line

When a line of text in the buffer is longer than the width of the window, Emacs usually displays it on two or more "screen lines". C-n C-p命令是操作在screen lines基础上，而其他的命令则是针对的logical line。 可以设置line-move-visual为nil, 使得c-n c-p命令也是针对logical line。


<strong>Erasing Text
</strong>基础，此节忽略。

<strong>Undoing Changes
</strong>undo的快捷键有3个。

<strong>Files & Help
</strong>忽略，help在后面详细讲解

<strong>Blank Lines
</strong>C-o命令本质是：在光标处插入2个newline，光标再移到空行首。
用c-x c-o删除一空行或多个连在一起的空行。

<strong>Continuation Lines
</strong>默认的情况，句子太长的话，emcas可能the wrapping发生在单词中间，这样会严重影响阅读。在编写文字时，可以通过Auto Fill mode来让Emacs自动插入newline。
另一种情况是，你需要修改包含很多长句子的文本。这样auto fill mode就没用了，因为文章已经是完成状态。这时就需要Visual Line mode，自动在词间wrap。
Emacs can optionally "truncate" long logical lines instead of continuing them.

<strong>Cursor Position Informaiton
</strong>
掌握了解如下命令，还是会有些用处的。例如，统计字数，查看字符的character code，即character encoding。关于什么是character encoding, 参见这篇文章：<a href="http://www.iwrose.com/?p=146" title="聊聊自己对character set, character encoding的理解" target="_blank">http://www.iwrose.com/?p=146</a>

<blockquote>`M-x what-line'
     Display the line number of point.

`M-x line-number-mode'
`M-x column-number-mode'
     Toggle automatic display of the current line number or column
     number.

`M-='
     Display the number of lines, words, and characters that are
     present in the region (`count-words-region').  for
     information about the region.

`M-x count-words'
     Display the number of lines, words, and characters that are
     present in the buffer.  If the region is active display the 
     numbers for the region instead.

`C-x ='
     Display the character code of character after point, character
     position of point, and column of point (`what-cursor-position').

`M-x hl-line-mode'
     Enable or disable highlighting of the current line. 

`M-x size-indication-mode'
     Toggle automatic display of the size of the buffer. </blockquote>



<strong>Numeric Arguments
</strong>
有两种输入方式：


<blockquote>Instead of typing `M-1', `M-2', and so on, another way to specify a
numeric argument is to type `C-u' (`universal-argument') followed by
some digits, or (for a negative argument) a minus sign followed by
digits.</blockquote>



<strong>Repeating a Command
</strong>用数字参数可以让某些命令重复N次，但是如果数字参数别有用处的时候，此方法就不行了。
这时，用C-x z命令可以完成重复操作。z的个数表明重复次数。不过该命令前也可以通过加数字参数来实现指定次数的重复操作。

:) End!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date>2012-08-31 22:11:47</wp:post_date>
		<wp:post_date_gmt>2012-08-31 14:11:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%9b%9b%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>聊聊自己对character set, character encoding的理解</title>
		<link>http://www.iwrose.com/2012/08/31/%e8%81%8a%e8%81%8a%e8%87%aa%e5%b7%b1%e5%af%b9character-set-character-encoding%e7%9a%84%e7%90%86%e8%a7%a3/</link>
		<pubDate>Fri, 31 Aug 2012 15:21:59 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[简洁点说，也不复杂了。

字符集(character set): 就是包含一个个已经编好号的并排好序的字符对象(拿一些中文字符集说，可以想成一个个贴了数字编号的“中文汉字”，按照某种排队方式排列整齐)的集合。不同的编号方式，排列方式，字符对象的个数等等构成的集合就导致了某种文字的多种字符集，如中文中的GB, GBK等等。

而我们把字符集中的字符对象的编号称为字符码(code point)。不得不说这英文名有点蛋疼:)。

但是，有了字符集，我们在记事本中编辑书写文字后保存时，一个个汉字是如何存储在硬盘中呢？
<!--more-->
首先，我们不可能象码砖样把“汉字的图像”堆积起来然后保存在硬盘中，那样生成的文件太大，浪费资源，而且你想换字体也是不可能了。
那怎么办呢？既然有字符集，我们把每个字符的字符码（一种数字编号）保存起来不就可以了？！这样读取文本的时候，再把字符码与一个个图像字体对应起来然后显示出来就ok了。这也就是ascii, gb2312等字符集的实际运用方式。
不过，大名鼎鼎的Unicode字符集中可以包含的字符数非常多（这可是包容全球！），如果我们象上面这种用字符码直接保存的方式来存储文件的话，必须保证每个字符都是用个32位的数字保存，例如第一个字符用00000001来表示，最后一个用FFFFFFFF来表示。可是假如，我门只需用到1万个汉字，那么真得有必要每个字符都用32位表示吗？答案是否定的。但是，却必须得用32位。
那么，这次该如何改进？
答案：利用字符编码(character encoding)。我们搞java开发不是提倡MVC分层架构吗，同样，在字符码的基础上，我们可以再对其编码，形成新的一层结构，即对字符码编码后生成的字节流，专用于存储在硬盘中。读取文件时，先解码成字符码，然后字符码再对应成图像字符，显示出来。我们称这种将字符集中的字符码映射为字节流的编码方式叫字符编码。例如UTF-8，UTF-16就是字符编码。UTF-8是种变长的编码方式，如果是英文，就用一字节保存，如果是汉字，就用两字节保存，这样，大大减少了需要存储的文件大小。

这样，就又有一个新的问题出来了。那之前所说的ascii, gb2312按原理来说，都没有编码这一步，那么它们有字符编码这一说法吗？
答案是的确有。拿gb2312来说，我们就称它字符集是gb2312, 字符编码也是gb2312。然后说它是字符集与字符编码相结合的设计，而说UTF-8只是Unicode字符集的其中一种字符编码，是字符集与字符编码分离的设计。

好了，写到这把。写完后的感觉是：很可能描述的只能我自己看的懂，也可能有错误。如果有发现错误或不懂的，欢迎拍砖～ :)

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date>2012-08-31 23:21:59</wp:post_date>
		<wp:post_date_gmt>2012-08-31 15:21:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%81%8a%e8%81%8a%e8%87%aa%e5%b7%b1%e5%af%b9character-set-character-encoding%e7%9a%84%e7%90%86%e8%a7%a3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="misc"><![CDATA[Misc.]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e7%a0%81"><![CDATA[编码]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GNU Emacs Manual 之初次阅读 （五）</title>
		<link>http://www.iwrose.com/2012/08/31/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e4%ba%94%ef%bc%89/</link>
		<pubDate>Fri, 31 Aug 2012 15:28:05 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[这篇文章就记录下关于Minibuffer的内容。
<strong>minibuffer中可以使用到的命令有：
</strong>C-o 可以用于扩充minibuffer的大小。
C-q
C-x o
C-a
C-k
C-y
C-M-v可以用于scroll帮助窗口。

<strong>minibuffer中补全操作种类及详解：
</strong><!--more-->

<blockquote>usually TAB, RET, and SPC) are rebound in the minibuffer to special completion commands.
`TAB'
     Complete the text in the minibuffer as much as possible; if unable
     to complete, display a list of possible completions
     (`minibuffer-complete').

`SPC'
     Complete up to one word from the minibuffer text before point
     (`minibuffer-complete-word').  This command is not available for
     arguments that often include spaces, such as file names.

`RET'
     Submit the text in the minibuffer as the argument, possibly
     completing first (`minibuffer-complete-and-exit').  *Note
     Completion Exit::.

`?'
     Display a list of completions (`minibuffer-completion-help').</blockquote>


<strong>minibuffer中对history的操作：
</strong>通过M-p M-n可以对minibuffer history进行操作。M-r M-s对minibuffer history进行搜索。

<strong>另外：
</strong>相比与C-x z的重复命令操作，针对minibuffer C-x ESC ESC可以同样重复命令。
M-x list-command-history可以列举所以minibuffer中输入的命令历史，注意，只是针对minibuffer。

在minibuffer中输入密码时，可以使用c-u(一般输入状态下无法使用)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2012-08-31 23:28:05</wp:post_date>
		<wp:post_date_gmt>2012-08-31 15:28:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e4%ba%94%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> GNU Emacs Manual 之初次阅读 （六）</title>
		<link>http://www.iwrose.com/2012/09/01/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%85%ad%ef%bc%89/</link>
		<pubDate>Sat, 01 Sep 2012 03:41:23 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=156</guid>
		<description></description>
		<content:encoded><![CDATA[先说说M-x的事，然后具体的学习help命令。
关于M-x的两个小事：
1. 当你输入的命令有相应的key binding的话，按完RET键后，在echo area，emacs会提示对应的key信息。可以设置suggest-key-bindings变量为nil来关闭。
2. M-x是通过运行execute-extended-command来读取输入的命令名，然后来调用运行。

Help
help这一节没啥难点，就是记忆。还好manul对常用的c-h命令分类了，这样便于记忆。我也在此分类记录下来：
<strong>Key Help命令有：
</strong>C-h c show the command of key
C-h k serveral lines describe key
C-h K document for key
C-h w list the key that are bound to command 和C-h c的功能恰好相反
<!--more-->
<strong>Command and Variable Help命令有：
</strong>C-h f display the document of function(command).
C-h v descibe variables instead of functions.
C-h F document for command，与C-h K相呼应。

<strong>Apropos Help命令：
</strong>C-h a 命令名中包含apropos pattern的command。 apropos-command
M-x apropos 查找functions and variables。 GNU Emacs Manual 之初次阅读 （四）
M-x apropos-variable
M-x apropos-value
C-h d document中包含apropos pattern的函数和变量。

<strong>Package Help命令：
</strong>C-h p
C-h P
M-x list-packages 用于便捷安装管理包。

<strong>Multi Language Help命令：
</strong>C-h L describe-language-environment
C-h I describe-input-method
C-h C describe-coding-system
C-h h view-hello-file

<strong>History Message Help命令：
</strong>C-h l view-lossage
C-h e view-echo-area-messages

<strong>Misc Help命令：
</strong>C-h b describe-bindings
C-h r info-emacs-manual

<strong>除了以上命令，还有些可以用来查看版权，漏洞报告和调试说明，发行说明等文档的命令：</strong>
C-h C-c describe-copying
C-h C-e view-external-packages
C-h C-f view-emacs-FAQ
C-h g describe-gnu-project Richard Stallman写的文章。
C-h C-m 如何订购打印的文档
C-h C-n 或 C-h n view-emacs-news
C-h C-p view-emacs-problems如果你发现emcas的某个问题，可以查看这个文档，确定是否是emacs本身的bug.
C-h C-t emacs的开发计划。

另外，还有些其他的C-h命令，可以通过C-h C-h 或C-h ？ 来查看完整的命令列表。
C-h .也是个命令。用来显示tooltips.

<span style="text-decoration: underline;">这一节的命令和实际的编辑操作是没有直接关系的，但是它们和我们是否能精通Emacs却有着无法衡量的重要作用。想成为高手，必定得会熟练的从Emacs内置的文档查找知识。就如在Manual开头所说的，Emacs在Self document上做的非常好，不懂Emacs就问Emacs。:)</span>

I'm the End!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date>2012-09-01 11:41:23</wp:post_date>
		<wp:post_date_gmt>2012-09-01 03:41:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%85%ad%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> GNU Emacs Manual 之初次阅读 （七）</title>
		<link>http://www.iwrose.com/2012/09/01/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e4%b8%83%ef%bc%89/</link>
		<pubDate>Sat, 01 Sep 2012 12:25:33 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=158</guid>
		<description></description>
		<content:encoded><![CDATA[接下来要学习的内容，都是和text changing文字修改有关的知识。
先介绍学习Mark这一节
Mark是个标记，就象锚点，在emcas的buffer中对当前光标位置做个标记。
这样有什么用处呢？一是，方便快速的回到之前光标位。二是，用来选择region,即区域。而emacs默认的情况也是mark后，在移动光标的话会动态的高亮显示一个region。这中行为被emacs称为 transient mark mode，可以M-x transient-mark-mode命令来关闭。这样，高亮显示就不会出现了，不过region还是继续存在的。

下面介绍下mark更多详细情况：
<strong>Setting the Mark:
</strong>除去鼠标操作的话，还有3个方法设置mark。C-SPC, C-@, Shifled cursor motion keys(按住shift再移动光标时会自动mark)。<!--more-->
之前说到mark的一个用处就时方便快速的回到之前的光标位，那么如何操作呢？ 首先，在某一位置，按C-@或C-SPC两次，然后，你可以在任何其他位置通过C-u C-@来回到标记位.

C-x C-x命令是用来在mark和point之间交换位置的快捷键。不过要注意的是，如果你之前mark某点，然后又取消了，使用C-x C-x命令会一样生效，而且会激活之前的被取消的mark。

mark在设置后，可能处于两种状态，激活和非激活。处于激活状态时，移动光标时会高亮显示区域。而非激活状态时则相反。

C-y命令在插入时，会在插入的文字开头设置非激活标记。便于使用C-u C-@来跳转。

<strong>Commands to Mark Textual Objecs:
</strong>下面的是些快捷的用来选择区域的命令：
M-@ : set mark at the end of next word.
C-M-@: Mark expression
M-h: Mark-paragraph
C-M-h: Mark-defun
C-x C-p: mark-page
C-x h: mark-whole-buffer

<strong>The Mark Ring
</strong>每次设置mark的时候，当前的mark都会被保存在mark ring中，就想kill ring。可以用C-u C-@来不断的回跳到之前的mark点。

不过如果是经常要与某固定点来回跳动，更好的方法是把position保存到register中。

<strong>The Global Mark Ring
</strong>在每个buffer中mark时，除了当前buffer的mark ring会保存，global mark ring也会保存。这样，当切换到别的buffer时，也可以用C-x C-@来回到之前的buffer的mark位置。

<strong>Disabling Transient Mark Mode
</strong>

<blockquote>The default behavior of the mark and region, in which setting the mark activates it and highlights the region, is called Transient Mark mode.</blockquote>


transient mark mode的特点是，set mark & activate it.
在transient mark mode下和非transient mark mode，C-x C-x的表现是不同的。在TM mode，如果disactivate mark后再使用C-x C-x会交换point和mark,并且激活mark，重新高亮region。而C-u C-x C-x则不会重新激活它。
而在非TM mode下，虽然默认的mark点就是非激活状态，但是，C-x C-x却不会激活它。而用C-u C-x C-x却可以激活。
这有点让人迷惑。。


EOF]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date>2012-09-01 20:25:33</wp:post_date>
		<wp:post_date_gmt>2012-09-01 12:25:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e4%b8%83%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> GNU Emacs Manual 之初次阅读 （八）</title>
		<link>http://www.iwrose.com/2012/09/02/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%85%ab%ef%bc%89/</link>
		<pubDate>Sun, 02 Sep 2012 05:16:55 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[关于Killing这一节，没什么特殊的原理，或者新术语。所以尽量简洁点记录。不过要注意的一点就是，Deletion和killing是不同的。Deletion是直接删除掉，而killing会删除后，将删除的数据保存在kill ring中，用C-y键可以插入，类似于Cut。
<strong>Deletion：
</strong>删除的快捷键有：
DEL:前删一字符
C-d:后删一字符
M-\:删除光标处的前后空白，tabs。
M-SPC:同上，不过会留下一个空白符。 
M-^:连接两行文字。
C-x C-o:删除所有当前行后的空白行
`M-^' (`delete-indentation') joins the current line and the previous
line, by deleting a newline and all surrounding spaces, usually leaving
a single space.
<!--more-->
<strong>Killing:
</strong>C-k所做的事情是：删除光标所在位置到行尾的字符，同时删除行尾的newline符号。
所以，如果C-k命令是用在行尾的话，其功用类似于M-^，整合两行，不过M-^是向前整合。(^符号是向上的嘛^_^)
C-S-SPC:删除光标所在的整行。不知怎么回事，按这个键在我ML系统上是mark的作用。
For region:
C-w: kill-region
M-w: kill-ring-save意思就是只save到kill ring
For word:
M-d: 向后删除word.
M-Del:向前删除word.
For sentence:
C-x Del: backward-kill-sentence
M-k: kill-sentence
For expressions:
C-M-k: kill-sexp
Special:
M-z char: killing with searching. 删除光标到遇到的第一个char之间的文字。

注意，如果是只读buffer的话，kill 命令不会擦除文字，但是会保存到kill-ring中，并提示错误。

<strong>Yanking:
</strong>C-y:yank
M-y:yank-pop
C-M-w:append-next-kill 

<strong>The Kill Ring:
</strong>kill ring只有一个，所有buffer通用，不象Mark ring，各buffer一个，整体又有一个。
kill-ring-max变量规定了ring的大小默认是60。
通过C-h v kill-ring命令可以查看当前kill ring内所有内容。
对于C-M-w命令：


<blockquote>If a kill command is separated from the last kill command by other commands (not just numeric arguments), it starts a new entry on the kill ring.  But you can force it to append by first typing the command `C-M-w' (`append-next-kill') right before it.  The `C-M-w' tells the following command, if it is a kill command, to append the text it kills to the last killed text, instead of starting a new entry.  With `C-M-w', you can kill several separated pieces of text and accumulate them to be yanked back in one place.
</blockquote>


<strong>Clipboard:
</strong>通过设置x-select-enabel-clipboard to nil，可以让emacs与系统的clipboard绝缘。

<strong>Accumulationg Text:
</strong>`M-x append-to-buffer'
     Append region to the contents of a specified buffer.会append到光标所在的位置的后面。

`M-x prepend-to-buffer'
     Prepend region to the contents of a specified buffer.会append到光标所在的位置的前面。

`M-x copy-to-buffer'
     Copy region into a specified buffer, deleting that buffer's old
     contents.

`M-x insert-buffer'
     Insert the contents of a specified buffer into current buffer at
     point.

`M-x append-to-file'
     Append region to the contents of a specified file, at the end.

<strong>Rectangles</strong>:
The rectangle operations fall into two classes: commands to erase or
insert rectangles, and commands to make blank rectangles.
erase or insert rectangles:
C-x r d delete-rectangle
C-x r k kill-rectangle 注意，这里的kill并不同于之前所说的kill, 数据被保存在一个只村上rectangel的特殊地方。因为，yank rectangle和yank linear text的处理方式不同，所调用的命令也是不同的。
C-x r y yank-rectangle
C-x r N rectangel-number-lines
C-x r t string-rectangle
M-x string-insert-rectangle
blank rectangles:
C-x r c: clear-rectangle
C-x r o: open-rectangel
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2012-09-02 13:16:55</wp:post_date>
		<wp:post_date_gmt>2012-09-02 05:16:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%85%ab%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[幸福的小酒]]></wp:comment_author>
			<wp:comment_author_email>admin@356688.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.356688.com/</wp:comment_author_url>
			<wp:comment_author_IP>123.130.254.165</wp:comment_author_IP>
			<wp:comment_date>2012-09-02 13:43:54</wp:comment_date>
			<wp:comment_date_gmt>2012-09-02 05:43:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[博客比我的强多了,学习下]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[iwrose]]></wp:comment_author>
			<wp:comment_author_email>iwrose@126.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>111.176.7.137</wp:comment_author_IP>
			<wp:comment_date>2012-09-02 14:00:10</wp:comment_date>
			<wp:comment_date_gmt>2012-09-02 06:00:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[搞IT的，会有些这方面的东西。你博客倒是怎么有广告～]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[王芳]]></wp:comment_author>
			<wp:comment_author_email>wjfxff@126.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>123.151.31.198</wp:comment_author_IP>
			<wp:comment_date>2012-09-02 15:47:35</wp:comment_date>
			<wp:comment_date_gmt>2012-09-02 07:47:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[他的是个黄网站]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title> GNU Emacs Manual 之初次阅读 （九）</title>
		<link>http://www.iwrose.com/2012/09/02/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e4%b9%9d%ef%bc%89/</link>
		<pubDate>Sun, 02 Sep 2012 06:48:51 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=163</guid>
		<description></description>
		<content:encoded><![CDATA[Registers这一节倒是新鲜，之前用的很少，但是得了解，以后用处还是很大的。
<strong>Save Position to Registers:
</strong>C-x r SPC R 其中，R表示寄存器名，字母或数字，a-zA-Z0-9。 point-to-register
C-x r j R jump-to-register
记忆诀窍：C-x r表示对register进行操作， SPC表示操作对象是position of point, 而C-SPC表示mark point，用SPC表示记录position倒是很合适。

<strong>Saving Text to Registers:
</strong>C-x r s R :copy-to-register 保存文本到register  记忆s:save
C-x r i R :insert-register 插入register到buffer
M-x append-to-register
M-x prepend-to-register
<!--more-->

<blockquote>`C-x r i R' inserts in the buffer the text from register R.
Normally it leaves point before the text and sets the mark after,
without activating it.  With a numeric argument, it instead puts point
after the text and the mark before.
</blockquote>


<strong>Saving rectangles to registers:
</strong>C-x r r R: copy-rectangle-to-register 其实这节内容和之前的rectangle C-x r d/k/y/t等操作很容易弄混。不过，努力记吧，谁让register和rectangle的名字都是r开头呢。
C-x r i R:同上。不过这个插的是rectangle,上面插的是text

<strong>Saving Window Configurations to Registers:
</strong>C-x r w R: window-configuration-to-register
C-x r f R: frame-configuration-to-register
C-x r j R:同上，上面是跳转到point, 这个是跳转到window or frame configuration.

<strong>Keeping Numbers in Registers:
</strong>C-u Number C-x r n R number-to-register
C-u Number C-x r + R increment-register
C-x r i R: instert-register

<strong>Keeping File names in registers:
</strong>如果经常在emacs对某文件操作（如，linux下某配置文件），可以在emacs的register中存下该文件的路径，便于用C-x r j R快捷打开该文件。
Lisp code：
(set-register ?R '(file . NAME))

<strong>Bookmarks:
</strong>bookmark的操作非常类似于对特殊的register的操作，
C-x r m BOOKMARK: bookmark-set
C-x r b BOOKMARK: bookmark-jump
C-x r l list-bookmarks
M-x bookmark-save:保存bookmark到硬盘文件中

 

<blockquote>  Here are some additional commands for working with bookmarks:

`M-x bookmark-load <RET> FILENAME <RET>'
     Load a file named FILENAME that contains a list of bookmark
     values.  You can use this command, as well as `bookmark-write', to
     work with other files of bookmark values in addition to your
     default bookmark file.

`M-x bookmark-write <RET> FILENAME <RET>'
     Save all the current bookmark values in the file FILENAME.

`M-x bookmark-delete <RET> BOOKMARK <RET>'
     Delete the bookmark named BOOKMARK.

`M-x bookmark-insert-location <RET> BOOKMARK <RET>'
     Insert in the buffer the name of the file that bookmark BOOKMARK
     points to.

`M-x bookmark-insert <RET> BOOKMARK <RET>'
     Insert in the buffer the _contents_ of the file that bookmark
     BOOKMARK points to.</blockquote>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date>2012-09-02 14:48:51</wp:post_date>
		<wp:post_date_gmt>2012-09-02 06:48:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e4%b9%9d%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Red Hat相关官方资源总结</title>
		<link>http://www.iwrose.com/?p=186</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[关于红帽的证书的基础知识（证书间的关系和学习路线）
<a href="http://cn.redhat.com/rhecm/rest-rhecm/jcr/repository/collaboration/jcr:system/jcr:versionStorage/e438326f0a052602624db3b0bf9e0045/1/jcr:frozenNode/rh:resourceFile">http://cn.redhat.com/rhecm/rest-rhecm/jcr/repository/collaboration/jcr:system/jcr:versionStorage/e438326f0a052602624db3b0bf9e0045/1/jcr:frozenNode/rh:resourceFile</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date>2012-11-07 19:00:54</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> GNU Emacs Manual 之初次阅读 （十）</title>
		<link>http://www.iwrose.com/2012/09/02/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%8d%81%ef%bc%89/</link>
		<pubDate>Sun, 02 Sep 2012 12:23:53 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[Display讲解的都是和显示有关的内容，如屏幕滚动，自定义显示字体颜色等等。

<strong>Scrolling</strong>:
C-v M-v两命令。
不过，一般滚动时，下一屏会留2行上一屏的内容, next-screen-context-lines可以自定义。
M-x scroll-down-line
M-x scroll-up-line
可以用来只滚动一行。默认没有绑定任何快捷键。

<strong>Recentering:
</strong>C-l : recenter-top-bottom看命令的名字可以猜出是中－上－下的顺序重新在屏幕中显示当前行。
>注意，这个命令和M-r命令的区别：
>C-l: 光标不移动，屏幕动。
>M-r: 屏幕不移动，光标动。光标移动顺序是从 光标点-中－上－下－中－上－下...的顺序移动
对于C-l还有点小技巧：
<!--more-->
<blockquote> You can also give `C-l' a prefix argument.  A plain prefix argument,
`C-u C-l', simply recenters point.  A positive argument N puts point N
lines down from the top of the window.  An argument of zero puts point
on the topmost line.  A negative argument -N puts point N lines from
the bottom of the window.  When given an argument, `C-l' does not clear
the screen or cycle through different screen positions.</blockquote>




M-x recenter 只居中，不会轮回移动。
C-M-l：reposition-window：非常智能的居中，例如在写 lisp的时候， 会努力把当前整个函数显示在screen中。

<strong>Automatic Scrolling:
</strong>这个automatic scrolling是不同于我们平常理解的自动滚屏。它是指，当你用C-n命令把光标移动到当前屏幕上下两头时，如果马上就要看不见光标了，那么，屏幕会自动向下或向上尽量滚动，显示一半屏幕新内容，并使光标居中。
不过这种默认的行为是可以通过scroll-conservatively和scroll-step变量设置的。
if you set `scroll-conservatively' to a small number N, then if you move point just a little off the screen (less than N lines), Emacs scrolls the text just far enough to bring point back on screen.

The variable `scroll-step' determines how many lines to scroll the window when point moves off the screen.The default value is zero, which causes point to always be centered after scrolling.

<strong>Horizontal Scrolling:
</strong>如果开启了truncated lines，则，当光标移动到左右边缘时，会触发自动滚动。hscroll-margin和hscroll-step可以自定义auto hscroll时的行为。
另外，用C-x <和C-x >可以人工滚动。不过滚动时text lines are truncated rather than continued.

<strong>Narrowing:
</strong>Portion:一部分，部分的意思。
narrowing有
该节的术语：
accessibel portion
widening
restriction: bounds of narrowing
涉及的命令有：
C-x n n: narrow-to-region
C-x n w: widen
C-x n p: narrow-to-page
C-x n d: narrow-to-defun

<strong>View Mode:
</strong>a minor mode, 用来查看文档很方便，而且会让你不会误修改内容.
M-x view-buffer
M-x view-file

q: view-quit 退出view mode也退出当前buffer
e: view-exit 只退出view mode

<strong>Follow Mode:
</strong>开启要的条件，用C-x 3命令分两window。
然后M-x follow-mode
follow-mode的功能类似于第一个windows的内容中没显示完成的，会在第二屏中显示。
不过，如果使用C-x C-+命令放大字体后，第二屏的内容该变动却没变动。而且，好像也用不了M->, M-<命令。

<strong>Text Faces:
</strong>之前看这节时没看明白，这次争取看明白。然后用自己语言总结出来.
face实际就是文字显示风格。包括有font, height, weight, salnt, foreground and background color, underlining or overlining.
大多是主模式通过Font Lock mode来给文字赋予face.

Emacs中有一系列默认的faces。所有的face都是在default face的基础上发展起来的。
buffer中显示的文字就是用的default face.
cursor face用来定义光标，不过只有 background color属性有用。光标覆盖下的文字的颜色和文字的背景色相同。(其实就是和default face中的background color属性一样。)不过，在text terminal下，光标的样式是由终端决定的。

<strong>Colors for faces:
</strong>M-x set-face-foreground	
M-x set-face-background
M-x set-foreground-color
M-x set-background-colar
M-x list-colors-display

<strong>Standard Faces:
</strong>该节列举了各种各样的face，自定义时可以对照看。

<strong>Text Scale:
</strong>C-x C-+
C-x C-=
C-x C--
C-x C-0
这些键都与text-scale-adjust绑定在一起。通过最后的按键来判断该大该小。
text-scale-mode-step能设置变化量。

<strong>Font Lock Mode:
</strong>这节看的云里雾里。先暂略过。

<strong>Highlight Interactively:
</strong>M-x highlight-changes-mode开启该模式，高亮文档中修改过的部分
M-x hi-lock-mode 开启该模式，高亮和指定正则表达匹配的内容。
对于hi-lock-mode:
C-x w h REGEXP 用于指定正则表达式，匹配，高亮。highlight-regexp
C-x w r REGEXP unhighlight REGEXP，取消高亮。unhighlight-regexp
C-x w l REGEXP highlight-lines-matching-regexp
C-x w b hi-lock-write-interactive-patterns
C-x w i hi-lock-find-patterns
这一节内容，对于以后编程啥的还是很有用处。

<strong>Window Fringes:
</strong>fringe:边缘.
On graphical displays, each Emacs window normally has narrow "fringes" on the left and right edges.
M-x fringe-mode能够关闭／开启fringe
window fringes的用处：
1. indicate a contiunation line.
2. indicate line truncation.
3. indicate buffer boundaries,
4. indicate when a program you are debuggis in executing.

<strong>Displaying Boundaries:
</strong>通过设置indicate-buffer-boundaries变量，可以控制显示效果。
该变量的值的结构是(INDICATOR . POSITION)
INDICATOR: top, bottom, up, down, t
POSITION: left, right, nil
For example, ((top . left)(t . right)) ((top . left)(bottom . left))

<strong>Useless Whitespace:
</strong>可用通过设置 trailing-whitespace来使得trailing whitespace显示出来。
用M-x delete-trailing-whitespace可以删除buffer/region的trailing whitespace.

M-x whitespace-mode能够显示whitespace-style变量中的所有whitespace.
其中，whitespace-style能支持的style可以通过c-h v命令来查看。

<strong>Selective Display:
</strong>To hide lines in the current buffer, type `C-x $'(`set-selective-display') with a numeric argument N.  Then lines withat least N columns of indentation disappear from the screen.  The onlyindication of their presence is that three dots (`...') appear at theend of each visible line that is followed by one or more hidden ones.


<strong>Displaying The Cursor:
</strong>这节介绍如何自定义cursor的样式。
在Text terminal中，cursor的样式是由终端控制。
在graphic display中:
1. 可以设置color: change the background attribute of the face named 'cursor'.
2. 可以设置shape：设置cursor-type变量，可以通过c-h v查看种类。
3. 可以设置是否blink：设置blink-cursor-mode变量为nil。
4. 可以设置对tab是否当整体用光标覆盖：设置x-stretch-cursor为non nil。
5. 可以设置非激活窗口是否显示空心光标：cursor-in-non-selected-windows to nil。
注意，使用M-x hl-line-mode可以让鼠标所在的位置更加容易找到。`M-x global-hl-line-mode' enables or disables the same mode globally.

<strong>Line Truncation:
</strong>You can explicitly enable line truncation for a particular buffer with the command `M-x toggle-truncate-lines'.  This works by locally changing the variable `truncate-lines'.
如果window变的太窄的话，emcas会自动开启line truncation。

<strong>Visual Line Mode:
</strong>之前有介绍过，会自动wrap logical lines，而且是在单词与单词之间的空格处wrap。这样不会影响阅读。
visual line mode在fringe处没有指示符，可以通过设置变量visual-line-fringe-indicators来决定是否显示。

这节内容很多，也有很多新知识。目前来说，只能说是看过一遍，离掌握还差些。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date>2012-09-02 20:23:53</wp:post_date>
		<wp:post_date_gmt>2012-09-02 12:23:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%8d%81%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> GNU Emacs Manual 之初次阅读 （十一）</title>
		<link>http://www.iwrose.com/2012/09/02/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%8d%81%e4%b8%80%ef%bc%89/</link>
		<pubDate>Sun, 02 Sep 2012 14:34:07 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[终于开始学Search这一节了，为自己的坚持鼓励下吧。
Searching and Replacement

四种Search类型：Incremental Search, Nonincremental Search, Word search, Regexp Search.接下来会具体分类介绍。

<strong>Incremental Search:
</strong>C-s isearch-forward
C-r isearch-backward

DEL删除错误的输入字符。
RET停止搜索。另外，任何和搜索没有关系的命令也都可以stop search。当exit search的时候，会自动把当前point保存到mark ring中，使用C-u C-@跳转。
<!--more-->
在搜索时显示的结果中，非选中的其他词也会高亮，它们的face是有lazy-highlight控制的。
当结束了搜索后，可以用C-s C-s或C-r C-r命令重复之前的搜索。The first `C-s' is the key that invokes incremental search, and the second `C-s' means "search again".

在输入搜索词时，可以用M-p M-n来选择之前的搜索词；搜索过程中，可以用M-e临时修改搜索词。

如果输入词是小写，则，the search is case-insensitive，如果有大写字符，则，the search is case-sensitive。

最最重要的：在Incremental search状态下，输入C-h C-h显示帮助列表。

在Incremental serach中，可以进行如下yank操作：
C-y isearch-yank-killn
M-y isearch-yank-pop
C-w isearch-yank-word-or-char: appends the next character or word at point to the search string.
M-s C-e isearch-yank-line: appends the rest of the current line to the search string.
C-M-w delete the last charater from the search string
C-M-y appends the character after point to the search string.

当minibuffer激活的时候，c-s c-r也可以对minibuffer操作。M-r M-s对minibuffer进行regex search操作。

<strong>Nonincremental Search:
</strong>
`C-s <RET> STRING <RET>'
     Search for STRING.

`C-r <RET> STRING <RET>'

<strong>Word Search:
</strong>`M-s w'
     If incremental search is active, toggle word search mode
     (`isearch-toggle-word'); otherwise, begin an incremental forward
     word search (`isearch-forward-word').

`M-s w <RET> WORDS <RET>'
     Search for WORDS, using a forward nonincremental word search.

`M-s w C-r <RET> WORDS <RET>'
     Search backward for WORDS, using a nonincremental word search.

<strong>Regular Expression Search
</strong>`C-M-s'
     Begin incremental regexp search (`isearch-forward-regexp').

`C-M-r'
     Begin reverse incremental regexp search
     (`isearch-backward-regexp').

<strong>Searching and Case:
</strong>Typing `M-c' within an incremental search toggles the case sensitivity of that search.

<strong>Replace:
</strong>Simple replace: M-x replace-string
Regexp replace: M-x replace-regex
Query replace: M-%
Regexp Query replace: C-M-%
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date>2012-09-02 22:34:07</wp:post_date>
		<wp:post_date_gmt>2012-09-02 14:34:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%8d%81%e4%b8%80%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> GNU Emacs Manual 之初次阅读 （十二）</title>
		<link>http://www.iwrose.com/2012/09/03/gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%8d%81%e4%ba%8c%ef%bc%89/</link>
		<pubDate>Mon, 03 Sep 2012 10:30:19 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=174</guid>
		<description></description>
		<content:encoded><![CDATA[Fixtit是关于修正文本内容的一节，里面有一些内容前面已经讲解过。
<strong>Undo：</strong>
工作原理：
通常，
1. 每个编辑命令都会被当作一个个体保存到undo records中，
2. 但是例如query-replace等命令则会被分成小的部分记录在undo records中，
3. 连续的单个字符插入操作通常被整合成一个整体记录在undo record中。

关于如何redo即 undo the undo，我插入原文的解说（有些拗口）:
   
<!--more-->
<blockquote>Any command other than an undo command breaks the sequence of undo commands.  Starting from that moment, the entire sequence of undo commands that you have just performed are themselves placed into the undo record, as a single set of changes.  Therefore, to re-apply changes you have undone, type `C-f' or any other command that harmlessly breaks the sequence of undoing; then type `C-/' to undo the undo command.</blockquote>


如果在redo的过程中想恢复undo，使用M-x undo-only命令。

如果区域是激活状态，undo命令可以只针对该区域。
C-u C-/可以针对非激活区域。

You can specify how much undo records to keep by setting the variables `undo-limit', `undo-strong-limit', and `undo-outer-limit'.

<strong>Transposing Text</strong>
C-t character
M-t word
C-M-t sexps 
C-x C-t sentence

<strong>Case Conversion</strong>
M-l
M-u
M-c
由于一般是需要修改前一个单词，所以用:
M-- M-l
M-- M-u
M-- M-c会更加的快捷。而不需要移动鼠标。

<strong>Checking and Correcting Spelling
</strong>了解以下命令：
M-$ ispell-word
M-x ispell
M-x ispell-buffer
M-x ispell-region
M-x ispell-message
M-x ispell-change-dictionary
M-x ispell-kill-ispell
M-x flyspell-mode: highlight all mispelled words.
M-x flyspell-prog-mode: enabel flyspell mode for comments and strings only.


这是在寝室完成的内容，写的也简洁。另外，接下来的keyboard Macro这一章就不学习了。说实在的，没发现它有啥用处。
EOF]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date>2012-09-03 18:30:19</wp:post_date>
		<wp:post_date_gmt>2012-09-03 10:30:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-emacs-manual-%e4%b9%8b%e5%88%9d%e6%ac%a1%e9%98%85%e8%af%bb-%ef%bc%88%e5%8d%81%e4%ba%8c%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[www.94haha.com]]></wp:comment_author>
			<wp:comment_author_email>webmaster@94haha.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.94haha.com/</wp:comment_author_url>
			<wp:comment_author_IP>218.57.45.196</wp:comment_author_IP>
			<wp:comment_date>2012-10-17 11:38:01</wp:comment_date>
			<wp:comment_date_gmt>2012-10-17 03:38:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[自从工作后就没来过了，今天偶然来访，越来越好了。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[www.356688.com]]></wp:comment_author>
			<wp:comment_author_email>adminzp9vl9@356688.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.356688.com/</wp:comment_author_url>
			<wp:comment_author_IP>218.57.46.151</wp:comment_author_IP>
			<wp:comment_date>2012-09-15 08:29:00</wp:comment_date>
			<wp:comment_date_gmt>2012-09-15 00:29:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我的博客写了几天就散伙了，实在没什么好写的，看了你的博客才知道，我只是个打酱油滴！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[笑话据点]]></wp:comment_author>
			<wp:comment_author_email>adminn7tj7p@jvdian.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jvdian.com/</wp:comment_author_url>
			<wp:comment_author_IP>112.246.8.73</wp:comment_author_IP>
			<wp:comment_date>2012-09-17 15:20:42</wp:comment_date>
			<wp:comment_date_gmt>2012-09-17 07:20:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[多更新，要不然还以为您老人家去保卫钓鱼岛了呢]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>关于Win 8系统的一些个人定制和资源 （不定时更新）</title>
		<link>http://www.iwrose.com/2012/11/02/%e5%85%b3%e4%ba%8ewin-8%e7%b3%bb%e7%bb%9f%e7%9a%84%e4%b8%80%e4%ba%9b%e4%b8%aa%e4%ba%ba%e5%ae%9a%e5%88%b6%e5%92%8c%e8%b5%84%e6%ba%90-%ef%bc%88%e4%b8%8d%e5%ae%9a%e6%97%b6%e6%9b%b4%e6%96%b0%ef%bc%89/</link>
		<pubDate>Fri, 02 Nov 2012 06:35:54 +0000</pubDate>
		<dc:creator>iwrose</dc:creator>
		<guid isPermaLink="false">http://www.iwrose.com/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>系统定制：</strong>

<strong> 键盘布局修改： </strong>

<strong>1）修改注册表 </strong>

<strong>2）利用AutoHotKey工具 </strong>

<strong>资源链接： </strong>

<strong><a href="http://www.win8mi.com/">http://www.win8mi.com/</a> 关于win 8的一个网站</strong>

<strong> <a href="https://www.dreamspark.com/Default.aspx">https://www.dreamspark.com/Default.aspx</a> 一个免费获取正版软件的途径</strong>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date>2012-11-02 14:35:54</wp:post_date>
		<wp:post_date_gmt>2012-11-02 06:35:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8ewin-8%e7%b3%bb%e7%bb%9f%e7%9a%84%e4%b8%80%e4%ba%9b%e4%b8%aa%e4%ba%ba%e5%ae%9a%e5%88%b6%e5%92%8c%e8%b5%84%e6%ba%90-%ef%bc%88%e4%b8%8d%e5%ae%9a%e6%97%b6%e6%9b%b4%e6%96%b0%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="win-8"><![CDATA[Win 8]]></category>
		<category domain="category" nicename="%e6%97%a5%e5%bf%97"><![CDATA[日志]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[就是哈哈]]></wp:comment_author>
			<wp:comment_author_email>webmaster@94haha.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.94haha.com/</wp:comment_author_url>
			<wp:comment_author_IP>112.246.14.97</wp:comment_author_IP>
			<wp:comment_date>2012-11-08 16:43:28</wp:comment_date>
			<wp:comment_date_gmt>2012-11-08 08:43:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[人生多风雨，快乐常相伴！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
</channel>
</rss>
